package generated;

import org.testng.ITestResult;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import org.openqa.selenium.*;
{% if browser == 'chrome' or browser == 'chrome_headless' %}
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
{% elif browser == 'firefox' or browser == 'firefox_headless' %}
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxOptions;
import org.openqa.selenium.firefox.FirefoxProfile;
{% endif %}

import io.github.bonigarcia.wdm.WebDriverManager;

/**
 * UI test cases for {{appname}}
 * Generated @ {{now}}
 */

public class GeneratedTests {
    private final String URL = "{{appurl}}";
    private final long waitEvent = {{wait_event}}L;
    private final long waitReload = {{wait_reload}}L;
    private WebDriver driver;

    @BeforeClass
	public void oneTimeSetUp() {
{% if browser == 'chrome' or browser == 'chrome_headless' %}
        // create chrome driver instance       
        WebDriverManager.chromedriver().setup();
        ChromeOptions chromeOptions = new ChromeOptions();
    {% if browser == 'chrome_headless' %}
    	chromeOptions.addArguments("--headless");
    {% endif %}
        this.driver = new ChromeDriver(chromeOptions);
        Dimension dim = new Dimension(1200, 890);
        this.driver.manage().window().setSize(dim);
{% elif browser == 'firefox' or browser == 'firefox_headless' %}
        // create firefox driver instance
{% endif %}
    }

	@AfterClass
	public void oneTimeTearDown() {
        this.driver.quit();
    }

	@BeforeMethod
	public void setUp() throws InterruptedException {
        this.driver.navigate().to(URL);
        Thread.sleep(this.waitReload);
    }

	@AfterMethod
	public void getStatusAndDuration(ITestResult tr) {
        // TODO: code related to test report
    }

    private boolean fireEvent(WebElement webElement, String eventType) throws ElementNotVisibleException, InterruptedException {
        if (webElement == null) {
            return false;
        }
        switch (eventType) {
        case "click":
            try {
                webElement.click();
                break;
            } catch (ElementNotVisibleException var6) {
                throw var6;
            } catch (WebDriverException var7) {
                return false;
            }
        case "enter":
            try {
                webElement.sendKeys(new CharSequence[]{Keys.RETURN});
                break;
            } catch (ElementNotVisibleException var4) {
                throw var4;
            } catch (WebDriverException var5) {
                return false;
            }
        case "hover":
            // LOGGER.info("EventType hover called but this isn't implemented yet");
            break;
        default:
            // LOGGER.info("EventType {} not supported in WebDriver.", eventable.getEventType());
            return false;
        }
        Thread.sleep(this.waitEvent);
        return true;
    }

    /**
     * Test methods ({{test_methods|length}})
     */

{% for method in test_methods %}
	@Test(priority={{method.priority}})
    public void {{method.name}}() throws InterruptedException {
        WebElement element;
    {% for eventable in method.eventables %}

        {% for form_input in eventable.form_inputs %}
        {% endfor %}
        element = driver.findElement({{eventable.by_method}});
        this.fireEvent(element, "{{eventable.event_type}}");
    {% endfor %}
    }

{% endfor %} 
}
