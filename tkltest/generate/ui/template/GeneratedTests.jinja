package generated;

import org.testng.ITestResult;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import org.openqa.selenium.*;
{% if browser == 'chrome' or browser == 'chrome_headless' %}
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
{% elif browser == 'firefox' or browser == 'firefox_headless' %}
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxOptions;
import org.openqa.selenium.firefox.FirefoxProfile;
{% endif %}

import io.github.bonigarcia.wdm.WebDriverManager;

/**
 * UI test cases for {{appname}}
 * Generated @ {{now}}
 */

public class GeneratedTests {
    private final String URL = "{{appurl}}";
    private final long waitEvent = {{wait_event}}L;
    private final long waitReload = {{wait_reload}}L;
    private WebDriver driver;

    @BeforeClass
	public void oneTimeSetUp() {
{% if browser == 'chrome' or browser == 'chrome_headless' %}
        // create chrome driver instance       
        WebDriverManager.chromedriver().setup();
        ChromeOptions chromeOptions = new ChromeOptions();
    {% if browser == 'chrome_headless' %}
    	chromeOptions.addArguments("--headless");
    {% endif %}
        this.driver = new ChromeDriver(chromeOptions);
        Dimension dim = new Dimension(1200, 890);
        this.driver.manage().window().setSize(dim);
{% elif browser == 'firefox' or browser == 'firefox_headless' %}
        // create firefox driver instance
{% endif %}
    }

	@AfterClass
	public void oneTimeTearDown() {
        this.driver.quit();
    }

	@BeforeMethod
	public void setUp() throws InterruptedException {
        this.driver.navigate().to(URL);
        Thread.sleep(this.waitReload);
    }

	@AfterMethod
	public void getStatusAndDuration(ITestResult tr) {
        // TODO: code related to test report
    }

    /**
     * Switches focus to the frame with the given frame ID.
     * @param frameIdentification
     * @throws NoSuchFrameException
     */
    private void switchToFrame(String frameIdentification) throws NoSuchFrameException {
        if (frameIdentification.contains(".")) {
            String[] frames = frameIdentification.split("\\.");
            for(int i = 0; i < frames.length; ++i) {
                String frameId = frames[i];
                this.driver.switchTo().frame(frameId);
            }
        } else {
            this.driver.switchTo().frame(frameIdentification);
        }
    }

    /**
     * Fires event of the given type on the given web element (if the elemennt is not null). If frame ID is specified,
     * switches focus to the frame with that ID before firing the event.
     * @param webElement element to fire event on
     * @param eventType event type: click or enter
     * @param frameId ID of frame to switch focus to before event dispatch
     * @return
     * @throws ElementNotVisibleException
     * @throws InterruptedException
     */
    private boolean fireEvent(WebElement webElement, String eventType, String frameId) throws ElementNotVisibleException, InterruptedException {
        if (webElement == null) {
            return false;
        }
        if (!frameId.isEmpty()) {
            this.switchToFrame(frameId);
        }
        switch (eventType) {
        case "click":
            try {
                webElement.click();
                break;
            } catch (ElementNotVisibleException enve) {
                throw enve;
            } catch (WebDriverException wde) {
                return false;
            }
        case "enter":
            try {
                webElement.sendKeys(Keys.RETURN);
                break;
            } catch (ElementNotVisibleException enve) {
                throw enve;
            } catch (WebDriverException wde) {
                return false;
            }
        case "hover":
            // TODO: logger.info("EventType hover called but this isn't implemented yet");
            break;
        default:
            // TODO: logger.info("EventType {} not supported in WebDriver.", eventable.getEventType());
            return false;
        }
        Thread.sleep(this.waitEvent);
        return true;
    }

    /**
     * Sets value of a web element representing a form field, depending on its type (text, textarea, password, input,
     * email, number, checkbox, radio, select). If the field is hidden, executes javascript code to set its value.
     * @param webElement
     * @param inputType
     * @param value
     * @param check
     */
    private void handleFormField(WebElement webElement, String inputType, String value, boolean check) {
        if (webElement == null) {
            return;
        }
        switch (inputType) {
            case "TEXT":
            case "TEXTAREA":
            case "PASSWORD":
            case "INPUT":
            case "EMAIL":
            case "NUMBER":
                webElement.clear();
                webElement.sendKeys(value);
                break;
            case "CHECKBOX":
                if (check && !webElement.isSelected()) {
                    webElement.click();
                } else if (!check && webElement.isSelected()) {
                    webElement.click();
                }
                break;
            case "RADIO":
                if (check) {
                    webElement.click();
                }
                break;
            case "SELECT":
                webElement.sendKeys(value);
                break;
            case "HIDDEN":
                JavascriptExecutor js = (JavascriptExecutor)this.driver;
                js.executeScript("arguments[0].setAttribute(arguments[1], arguments[2]);", webElement, "value", value);
        }
    }


    /**
     * Test methods ({{test_methods|length}})
     */

{% for method in test_methods %}
	@Test(priority={{method.priority}})
    public void {{method.name}}() throws InterruptedException {
        WebElement element;
    {% for eventable in method.eventables %}

        {% for form_input in eventable.form_inputs %}
            {% if form_input.by_method.startswith('By.xpath') %}
        element = driver.findElement({{form_input.by_method}});
        this.handleFormField(element, "{{form_input.type}}", "{{form_input.value}}", {{form_input.checked}});
            {% endif %}
        {% endfor %}
        element = driver.findElement({{eventable.by_method}});
        this.fireEvent(element, "{{eventable.event_type}}", "{{eventable.related_frame}}");
    {% endfor %}
    }

{% endfor %} 
}
